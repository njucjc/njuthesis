#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass ../build/thesis
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package none
\inputencoding utf8-plain
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
实验二: 调用图分析
\end_layout

\begin_layout Author
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
成员姓名
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
学号
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
负责工作
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
陈锦赐
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MF1833004
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
实验二
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
李俊宥
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MG1833038
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
实验一
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
刘少聪
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MG1833048
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
实验三
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Date
2018年12月03日
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "../build/frontmatter.lyx"

\end_inset


\end_layout

\begin_layout Chapter
概览
\end_layout

\begin_layout Section
引言
\end_layout

\begin_layout Standard
调用图的相似度分析工作由来已久，研究的重点在于函数间相似性计算和函数调用图同构问题。文献
\begin_inset CommandInset citation
LatexCommand cite
key "edit_dist"
literal "false"

\end_inset

提出函数调用图的图编辑距离的概念计算相似度；文献
\begin_inset CommandInset citation
LatexCommand cite
key "二分图"
literal "false"

\end_inset

提出基于二分图匹配的相似性度量算法；文献
\begin_inset CommandInset citation
LatexCommand cite
key "common-edge"
literal "false"

\end_inset

提出了基于最大公共边数的度量算法。这些文献的基本思路都是想根据方法（函数）的内部特征判断节点是否匹配，然后再根据方法（函数）间的调用关系来判断边是否匹配，最后根
据边匹配的情况来判断调用图的相似性。
\end_layout

\begin_layout Standard
这些工作的目标都是根据程序调用图的相似性来检测其中的恶意代码，这与我们的工作目标（同一程序的不同版本间的调用图差异）有所出入，但是，我们可以借鉴它们的基本思想来
完成我们的工作。
\end_layout

\begin_layout Standard
本次我采用的思路与文献
\begin_inset CommandInset citation
LatexCommand cite
key "common-edge"
literal "false"

\end_inset

类似，主要用最大公共边数来衡量调用图的相似度，并实现了调用图差异比较工具JCallGraph
\begin_inset CommandInset citation
LatexCommand cite
key "JCallgraph"
literal "false"

\end_inset

。
\end_layout

\begin_layout Section
相关概念
\end_layout

\begin_layout Standard
为了方便之后的算法描述和讨论，我们先给出程序调用图的定义，具体如定义
\begin_inset CommandInset ref
LatexCommand ref
reference "def:调用图"
plural "false"
caps "false"
noprefix "false"

\end_inset

所示：
\end_layout

\begin_layout Definition
\begin_inset CommandInset label
LatexCommand label
name "def:调用图"

\end_inset

（程序调用图）程序调用图
\begin_inset Formula $G=(V_{G},E_{G})$
\end_inset

，是由二元组构成的有向图，
\begin_inset Formula $V_{G}$
\end_inset

是节点集，每个节点对应于一个方法(函数)；
\begin_inset Formula $E_{G}$
\end_inset

是边集，是方法(函数)调用关系的全集，
\begin_inset Formula $E_{G}$
\end_inset

是
\begin_inset Formula $V_{G}$
\end_inset

之间笛卡尔积的子集。若存在节点
\begin_inset Formula $f_{1}$
\end_inset

到
\begin_inset Formula $f_{2}$
\end_inset

的边，则说明方法(函数)
\begin_inset Formula $f_{1}$
\end_inset

调用了方法(函数)
\begin_inset Formula $f_{2}$
\end_inset

。
\end_layout

\begin_layout Standard
从而，依据最大公共边数占总边数的比例定义调用图相似度如下：
\end_layout

\begin_layout Definition
\begin_inset CommandInset label
LatexCommand label
name "def:调用图相似度"

\end_inset

（调用图相似度）设同一程序的两个不同版本分别为A和B，则A与B的相似度
\begin_inset Formula $sim(A,B)$
\end_inset

可以用如下公式表示：
\begin_inset Formula 
\[
sim(A,B)=\frac{E_{G_{A}}∩E_{G_{B}}}{E_{G_{A}}\text{∪}E_{G_{B}}}
\]

\end_inset


\end_layout

\begin_layout Standard
公式表示的是，同一个程序的不同版本之间调用图的边交集占并集的比例，据此，我们可以进一步定义调用图的差异如下：
\end_layout

\begin_layout Definition
\begin_inset CommandInset label
LatexCommand label
name "def:调用图的差异"

\end_inset

（调用图的差异）设同一程序的两个不同版本分别为A和B，则A与B的差异度
\begin_inset Formula $diff(A,B)$
\end_inset

可以用如下公式表示：
\begin_inset Formula 
\[
diff(A,B)=1-sim(A,B)
\]

\end_inset


\end_layout

\begin_layout Section
算法描述
\end_layout

\begin_layout Standard
我实现的JCallGraph
\begin_inset CommandInset citation
LatexCommand cite
key "JCallgraph"
literal "false"

\end_inset

工具的输入为同一Java程序的两个不同版本A和B的调用图表示，这就要求我们先从JAR包中抽取出各个类的方法的调用关系图。记程序的其中一个版本A的调用图为
\begin_inset Formula $G_{A}$
\end_inset

，版本B的调用图为
\begin_inset Formula $G_{B}$
\end_inset

,工具的输出是
\begin_inset Formula $G_{A}$
\end_inset

与
\begin_inset Formula $G_{B}$
\end_inset

的差异
\begin_inset Formula $diff\text{(A,B)}$
\end_inset

，其整体框架流程如图
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:1.1"
plural "false"
caps "false"
noprefix "false"

\end_inset

所示：
\end_layout

\begin_layout Standard
\noindent
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /Users/jim/Code/njuthesis/res/流程图.png
	height 7cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
算法流程图
\begin_inset CommandInset label
LatexCommand label
name "fig:1.1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
抽取调用图
\end_layout

\begin_layout Standard
调用图的抽取采用的是一个开源工具java-callgraph
\begin_inset CommandInset citation
LatexCommand cite
key "java-callgraph"
literal "false"

\end_inset

，它能够根据输入的JAR包静态或动态地分析程序的调用关系图，这里我们仅使用了它静态分析的功能。
\end_layout

\begin_layout Standard
为了应对Java程序开发中广泛存在的包重命名现象，我们对java-callgraph
\begin_inset CommandInset citation
LatexCommand cite
key "java-callgraph"
literal "false"

\end_inset

的输出结果进行了包名打平的操作，即只保留节点的类名和方法名。另外，由于技术关系，我们不考虑类重命名和方法重命名的情况。
\end_layout

\begin_layout Subsection
调用图差异计算
\end_layout

\begin_layout Standard
算法描述如下：
\end_layout

\begin_layout Enumerate
任取
\begin_inset Formula $V_{G_{A}}\text{∩}V_{G_{B}}$
\end_inset

中的任意节点
\begin_inset Formula $f$
\end_inset

；
\end_layout

\begin_layout Enumerate
从
\begin_inset Formula $f$
\end_inset

出发分别对
\begin_inset Formula $G_{A}$
\end_inset

和
\begin_inset Formula $G_{B}$
\end_inset

进行BFS图遍历；
\end_layout

\begin_layout Enumerate
在遍历的过程中记录
\begin_inset Formula $G_{A}$
\end_inset

和
\begin_inset Formula $G_{B}$
\end_inset

中边相同（起始节点和终止节点相同）的个数k，及边的总个数n（相同边不重复计数）；
\end_layout

\begin_layout Enumerate
计算
\begin_inset Formula $diff(A,B)=1-\frac{k}{n}$
\end_inset

。
\end_layout

\begin_layout Standard
这样计算调用图的差异的算法复杂度为
\begin_inset Formula $O(|E_{G_{A}}|+|E_{G_{B}}|)$
\end_inset

，为线性的复杂度，控制算法的复杂度有利于我们在有限的时间内进行尽量多次的实验。
\end_layout

\begin_layout Section
小结
\end_layout

\begin_layout Standard
本章简述了关于程序调用图相似度分析的相关工作，并介绍了有关调用图分析的相关概念，且提出了衡量调用图相似程度及差异的算法。下一章我们将介绍我们的研究问题、实验结果
以及根据实验结果得出的具体结论。
\end_layout

\begin_layout Chapter
实验设计与分析
\end_layout

\begin_layout Section
实验设计
\end_layout

\begin_layout Standard
在我们的实验中我们将研究如下几个问题：
\end_layout

\begin_layout Itemize
RQ1.连续的Commit间，调用图的变化可能有多大?
\end_layout

\begin_layout Itemize
RQ2.连续的发布版本间，调用图的变化可能有多大?
\end_layout

\begin_layout Itemize
RQ3.在什么情况下，相近的两次Commit会使得调用图发生大的变化?
\end_layout

\begin_layout Itemize
RQ4.开发过程中，调用图有没有可能发生连续的大的变化?
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
我们采用控制变量法来研究这几个问题。其中因变量为：两程序调用图的差异值；自变量有两个：一是Commit，二是发行版本。各个自变量的取值如下：
\end_layout

\begin_layout Itemize
Commit：各个Commit哈希值
\end_layout

\begin_layout Itemize
发行版本：各个发行版本号
\end_layout

\begin_layout Section
实验配置
\end_layout

\begin_layout Subsection
实验环境
\end_layout

\begin_layout Standard
本文实现的JCallGraph
\begin_inset CommandInset citation
LatexCommand cite
key "JCallgraph"
literal "false"

\end_inset

基于Java实现，用于本次实验的软硬件环境配置如表
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:2.1"
plural "false"
caps "false"
noprefix "false"

\end_inset

所示，包括CPU型号、主存大小、操作系统版本和JRE版本等信息。
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
实验的软硬件配置
\begin_inset CommandInset label
LatexCommand label
name "tab:2.1"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
类别
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
配置描述
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CPU型号
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Intel Core i7-7700@3.60GHz
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
主存大小
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32GB
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
操作系统版本
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
macOS Mojavee 10.14.1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JRE版本
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Java(TM) SE Runtime Environment (build 1.8.0_192-b12)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
数据集
\end_layout

\begin_layout Standard
本此实验采用的数据集是weka
\begin_inset CommandInset citation
LatexCommand cite
key "weka"
literal "false"

\end_inset

机器学习工具包，它总共包含9,568个Commit以及598个Release版本，是一个比较成熟的Java项目。
\end_layout

\begin_layout Section
实验结果及分析
\end_layout

\begin_layout Subsection
RQ1与RQ3的相关实验
\end_layout

\begin_layout Standard
为了探究同一Java项目连续Commit间调用图的变化程度，我们首先从weka
\begin_inset CommandInset citation
LatexCommand cite
key "weka"
literal "false"

\end_inset

项目中抽取了最近的200个
\begin_inset Foot
status open

\begin_layout Plain Layout
仅选取最近200个Commit的原因是，离现在过于久远的Commit的软件环境与当前不兼容，如Java版本等。
\end_layout

\end_inset

Commit作为探究对象。
\end_layout

\begin_layout Standard
分别两两计算相邻Commit之间的调用图差异值，发现连续Commit之间的调用图差异微乎其微，基本都在
\begin_inset Formula $10^{-3}\text{～}10^{-4}$
\end_inset

的量级，还有大约63.8%的差异值为0，由于这些数据都过于稀疏，故不单独绘制出图像来表示。
\end_layout

\begin_layout Standard
因为连续的Commit间的调用图差异实在太小，我们自然而然地想进一步探究：到底多少个Commit之后才会出现调用图的“显著”变化。为此，我们设置Commit步长
分别为10，20，40，80，160的对比实验，结果如图
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:2.1"
plural "false"
caps "false"
noprefix "false"

\end_inset

所示。
\end_layout

\begin_layout Standard
\noindent
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /Users/jim/Code/njuthesis/res/commits.png
	width 14cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
不同Commit间的调用图差异
\begin_inset CommandInset label
LatexCommand label
name "fig:2.1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
图
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:2.1"
plural "false"
caps "false"
noprefix "false"

\end_inset

的横坐标为Commit号i(i = 0 ~ 9)与(i + step)的调用图比较，纵坐标为差异百分比，统计这些数据的最大值/均值/最小值如表
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:2.2"
plural "false"
caps "false"
noprefix "false"

\end_inset

所示。
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Commit间调用图差异数据统计
\begin_inset CommandInset label
LatexCommand label
name "tab:2.2"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Step
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
max/avg/min
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.055%/ 0.029%/ 0.001%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.059%/ 0.055%/ 0.054%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
40
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.118%/ 0.116%/ 0.114% 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
80
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.386%/ 0.378%/ 0.374%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
160
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.661%/ 0.635%/ 0.563%
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
根据实验数据我们对RQ1的回答如下：
\end_layout

\begin_layout Itemize
连续Commit之间的调用图差距及其微小，在我们的度量标准下，差别大约是
\begin_inset Formula $10^{-3}\text{～}10^{-4}$
\end_inset

的量级，更有部分Commit间没有调用图差异变化。
\end_layout

\begin_layout Standard
这比较符合我们的直觉，也符合软件开发的规律“单个的Commit不应该做过多的事情”，当然也有可能是我们选取的Commit段都是在软件的成熟期，在这个时期它往往不
会做过多的功能添加，而更多的是对已有的功能做bug-fix。而对RQ1的衍生问题：“多少个Commit后，调用图才会发生显著变化？”的回答是，从我们的实验数据中
可以看出，至少在间隔40以上的Commit之间才会存在相对较大的差异（设置阈值0.1%），且差异的大小与Commit的间隔几乎成线性关系。
\end_layout

\begin_layout Standard
根据实验数据我们对RQ3的回答如下：
\end_layout

\begin_layout Itemize
由于在我们的实验数据中相邻两次Commit间没有较大差异的情况，所以我们拓宽这个问题为：“在何种情况下，跨越一定步长的Commit之间的调用图会有较大变化”，针
对这个问题，我们观察图
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:2.1"
plural "false"
caps "false"
noprefix "false"

\end_inset

中的“剧增”情况（如step=3～163），人工检测gitlog，发现这一段是对某个功能的添加。以此我们可以看出，当对软件进行功能添加时，调用图会产生较大的变动
。
\end_layout

\begin_layout Itemize
另外，虽然在数据中没有体现，但根据直觉我们还觉得对代码进行重构时，也会造成调用图的剧烈变化。
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Subsection
RQ2与RQ4的相关实验
\end_layout

\begin_layout Standard
为了探究同一Java项目连续发布版本间调用图的变化程度，我们选取weka
\begin_inset CommandInset citation
LatexCommand cite
key "weka"
literal "false"

\end_inset

项目的3.7版下的14个小版本（3.7.0 - 3.7.13）
\begin_inset Foot
status open

\begin_layout Plain Layout
仅选取小版本间的比较的原因是，几个大版本中间经历了Java版本使用的变迁，存在版本不兼容问题。
\end_layout

\end_inset

作为探究对象。分别两两计算相邻发布版本间调用的差异，得到的结果如图
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:2.2"
plural "false"
caps "false"
noprefix "false"

\end_inset

所示。
\end_layout

\begin_layout Standard
\noindent
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /Users/jim/Code/njuthesis/res/version.png
	height 6cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
不同发行版本间的调用图差异
\begin_inset CommandInset label
LatexCommand label
name "fig:2.2"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
统计这些数据的最大值/均值/最小值数据如表所示。
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
版本间调用图差异数据统计
\begin_inset CommandInset label
LatexCommand label
name "tab:2.3"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
类别
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
值
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
出现位置
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
最大值
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
25.0%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.7.1与3.7.2的调用图差距
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
均值
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5.55%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
—
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
最小值
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.01%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.7.8与3.7.9的调用图差距
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
根据实验数据，我们对RQ2的回答如下：
\end_layout

\begin_layout Itemize
在连续的发布版本间，调用图的变化，在我们的度量标准下大于在5.55%左右，峰值是25.5%（3.7.2版本为功能版本），最小值是0.01%（3.7.9版本为bug-fix版本
）。
\end_layout

\begin_layout Itemize
大部分版本更新的调用图变化率都在均值以下，只有极少数的版本更新调用图变化率远远高于均（重构和功能添加等）。
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
最后，我们对RQ4的回答如下：
\end_layout

\begin_layout Itemize
在我们的实验结果中，没有出现调用图连续剧烈变化的情况，很有可能是我们的数据都是在开发后期维护的时间点上采集的。
\end_layout

\begin_layout Itemize
如果出现了连续调用图的变化，我想它可能会出现在软件开发的初期，但目前没有数据支持这一设想。
\end_layout

\begin_layout Chapter
总结与展望
\end_layout

\begin_layout Section
总结
\end_layout

\begin_layout Standard
总体上来说，完成了能够度量调用图差异的JCallGraph
\begin_inset CommandInset citation
LatexCommand cite
key "JCallgraph"
literal "false"

\end_inset

工具，并在weka上探索了在同一软件的不同版本间调用图的差异，且得到了一些初步的结论，在一定程度上回答了四个研究问题，让我们对调用图分析这个问题有了更深层次的理
解。
\end_layout

\begin_layout Section
不足与展望
\end_layout

\begin_layout Standard
现在的主要不足有以下几点：
\end_layout

\begin_layout Itemize
不能应对类和方法重命名的问题。
\end_layout

\begin_layout Itemize
数据采样过于集中在软件开发的成熟期，忽视了软件开发初期和中期的情况。
\end_layout

\begin_layout Itemize
数据集不足。
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
未来希望有机会能够完善这两个问题，期望能够得到更加一般性的结论。
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "JCallgraph"
literal "false"

\end_inset

https://github.com/njucjc/JCallGraph
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "java-callgraph"
literal "false"

\end_inset

https://github.com/gousiosg/java-callgraph
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "weka"
literal "false"

\end_inset

https://github.com/bnjmn/weka
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "edit_dist"
literal "false"

\end_inset

Hu, Xin, Tzi-cker Chiueh, and Kang G.
 Shin.
 "Large-scale malware indexing using function-call graphs." Proceedings of
 the 16th ACM conference on Computer and communications security.
 ACM, 2009.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "common-edge"
literal "false"

\end_inset

Shang, Shanhu, et al.
 "Detecting malware variants via function-call graph similarity." Malicious
 and Unwanted Software (MALWARE), 2010 5th International Conference on.
 IEEE, 2010.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "二分图"
literal "false"

\end_inset

刘星, and 唐勇.
 "恶意代码的函数调用图相似性分析." 计算机工程与科学 36.3 (2014): 481-486.
\end_layout

\end_body
\end_document
